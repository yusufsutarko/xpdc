<?xml version="1.0" encoding="UTF-8"?>
<beans	xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:task="http://www.springframework.org/schema/task"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:util="http://www.springframework.org/schema/util"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<!-- ================================ SETTING UMUM ================================ -->

	<!-- file properties (agar bisa digunakan di bean2) -->
	<util:properties id="props" location="classpath:app.properties" />

	<!-- Property placeholder (agar bisa digunakan dalam bentuk ${nama} di semua spring xml). Bisa lebih dari 1 properties -->
 	<context:property-placeholder location="classpath:app.properties"/>

	<!-- exception handling, bila terjadi error -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver" p:order="1" /> <!-- pertama, cek dulu apakah ada @ExceptionHandler di masing2 controller -->
	<bean class="com.sma.utils.ExceptionResolver" p:order="2" /> <!-- kedua, baru gunakan exception handler -->

	<!-- auto-discover semua annotated @Component (scheduler, emailer, sessionregistry, dll) lalu daftarkan semua sebagai beans -->
	<context:component-scan base-package="com.sma.utils" />

	<!-- message source, untuk fitur i18n dan error messages -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource" p:basename="/WEB-INF/messages" />

	<!-- initOnStartup (bean buatan sendiri untuk beberapa function yg mau dijalankan diawal, contoh: report compiler) -->
	<bean name="initOnStartup" class="com.sma.utils.InitOnStartup">
		<constructor-arg name="props" ref="props" />
		<constructor-arg name="servletContext" ref="servletContext" />
	</bean>
	
	<!-- ================================ SETTING EMAIL ================================ -->
	
	<!-- mailSender (digunakan oleh class id.co.ajsmsig.eagency.utils.Emailer) -->
	<bean name="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"
		p:host="${email.host}"
		p:port="${email.port}"
		p:protocol="${email.protocol}"
		p:username="${email.username}"
		p:password="${email.password}" 
		p:javaMailProperties-ref="mailProperties" />
	
	<util:properties id="mailProperties">
        <prop key="mail.smtp.auth">${email.auth}</prop>
        <prop key="mail.smtp.starttls.enable">${email.starttls}</prop>
        <prop key="mail.smtp.quitwait">${email.quitwait}</prop>
	</util:properties>
	
	<!-- ================================ KONEKSI DATABASE ================================ -->

	<!-- Data Source H2 (Conn Pool = HikariCP) -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	    <property name="poolName" value="springHikariCP" />
	    <property name="connectionTestQuery" value="SELECT 1" />
	    <property name="dataSourceClassName" value="org.h2.jdbcx.JdbcDataSource" />
	    <property name="maximumPoolSize" value="10" />
	    <property name="idleTimeout" value="30000" />
	    <property name="dataSourceProperties">
	        <props>
	            <prop key="url">jdbc:h2:/C:/java/xpdc</prop>
	            <prop key="user"></prop>
	            <prop key="password"></prop>
	        </props>
	    </property>
	</bean>
	<bean id="dbDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
	    <constructor-arg ref="hikariConfig" />
	</bean>

	<!-- 
	<bean id="dbDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close"
 		p:driverClass="org.h2.Driver"
 		p:jdbcUrl="jdbc:h2:/C:/java/xpdc"
 		p:username=""
 		p:password="" />
	 -->
	 
	<!-- Data Source MySQL (Conn Pool = BoneCP)
	<bean id="dbDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close"
 		p:driverClass="com.mysql.jdbc.Driver"
 		p:jdbcUrl="jdbc:mysql://localhost:3306/ekspedisi?autoReconnect=true"
 		p:username="dev"
 		p:password="linkdev"
 		p:idleConnectionTestPeriodInMinutes="60"
 		p:idleMaxAgeInMinutes="240"
 		p:maxConnectionsPerPartition="30"
 		p:minConnectionsPerPartition="10"
 		p:partitionCount="3"
 		p:acquireIncrement="5"
 		p:statementsCacheSize="100"
 		p:releaseHelperThreads="3" />
	-->
	
	<!-- Spring transaction manager -->
 	<bean id="dbTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
		p:dataSource-ref="dbDataSource" /> 

	<!-- Service object yang bersifat transactional --> 
	<bean id="dbService" class="com.sma.service.DbService" /> 

	<!-- enable transaction demarcation with annotations --> 
	<tx:annotation-driven transaction-manager="dbTransactionManager"/> 

	<!-- MyBatis session factory -->
	<!-- p:mapperLocations = lokasi sql map -->
	<!-- p:typeAliasesPackage = semua domain object yang ada disini sudah tidak perlu didefine satu per satu di sql map -->
	<bean id="dbSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dbDataSource"
		p:mapperLocations="classpath*:com/sma/persistence/**/*.xml"
		p:typeAliasesPackage="com.sma.model" />

	<!-- scan for mappers and let them be autowired --> 
	<!-- p:basePackage = scan semua mapper disini -->
	<bean id="dbMapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer" 
		p:basePackage="com.sma.persistence"
		p:sqlSessionFactory-ref="dbSqlSessionFactory" />
	
</beans>